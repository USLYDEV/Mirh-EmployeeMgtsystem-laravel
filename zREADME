//This is Employee Management System

First I create laravel new project

I create the database and php migrate

I install filament

I create filament user

I create model for (country, state, city, department and employees)

I create relationship in migrate and also provide the employees data in it migration file 

I create filament RESOURCE
The resource created all the form for the project 
--This create [create. edit, list] files
//php artisan make:filament-resource Country 


//php artisan make:filament-resource Country --generate --view
the -- generate will fill the resoruce php file with the table data
php artisan make:filament-resource Country --generate --view
php artisan make:filament-resource State --generate --view
php artisan make:filament-resource City --generate --view
php artisan make:filament-resource Department --generate --view
php artisan make:filament-resource Employee --generate --view
php artisan make:filament-resource User --generate --view --simple --soft-deletes


//ERROR
"Doctrine\DBAL\Driver\AbstractMySQLDriver" not found
solution: composer require doctrine/dbal

//RELATIONMANAGER ERROR in NAMEresource (Employee)
//This is use in but does not work for my application--->RELATIONMANAGER
// ->relationship(name: 'country', TitleAttribute: 'name')
 //I have to use this--->
// ->relationship('country', 'name')

//---- Using 
// ->relationship(name: 'country', TitleAttribute: 'name') 
will make sure we are getting data from DB 

//Using option instead of relationship
->option 
//option will populate information base on selected input, 
e.g Nigeria->list of state in Nigeria -> Oyo state -> list of city in oyo state

// ----- using auto reload when the form value changes
->live()
//This clear the field input when previois field changes
->afterStateUpdated(fn($set) => $set('city_id', null))

//This make sure that we select option base on previus selection
   //dependent delection    
     ->options(fn ($get): Collection => State::query()
           ->where('country_id', $get('country_id'))
                                ->pluck('name', 'id'))

//This make data search from the DB,
->searchable
//This make is possible to hide table item and toggleable
->toggleable(isToggledHiddenByDefault: true),


//MODEL

we call this public function for relation to work 

public function department (): BelongsTo
        {
            return $this-> belongsTo(Department::class);
        }

